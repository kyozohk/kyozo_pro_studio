/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model where tenants (organizations) own communities.
 * Users can have roles within these communities. Super admins have full access.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 * - /tenants/{tenantId}: Tenant (organization) data, accessible only to the tenant owner.
 * - /tenants/{tenantId}/communities/{communityId}: Communities owned by a tenant.
 * - /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}: User memberships within a community.
 * - /super-admins.json: Super admin list. Not a collection, used for rule evaluation.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Tenants (identified by tenantId = auth.uid) can manage their own tenant data.
 * - Communities can only be created and managed by their owning tenant. The 'createdBy' field in the Community entity must match the tenantId.
 * - Memberships can only be managed by community admins or super admins.
 * - Listing of users and tenant data is restricted.
 *
 * Denormalization for Authorization:
 * - Community documents include a `createdBy` field indicating the tenant who created it. This enables direct validation of tenant ownership without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the user to read and write their own data.
     * @path /users/{userId}
     * @allow (get, update, delete) auth.uid == userId
     * @allow (create) auth.uid == request.resource.data.userId
     * @allow (list) false
     * @deny (create) auth.uid != request.resource.data.userId
     * @deny (get, update, delete) auth.uid != userId
     * @principle Enforces user-ownership for all data access.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure tenant data, allowing only the tenant owner to read and write their own data.
     * @path /tenants/{tenantId}
     * @allow (get, update, delete) auth.uid == tenantId
     * @allow (create) auth.uid == tenantId
     * @allow (list) false
     * @deny (get, update, delete) auth.uid != tenantId
     * @principle Enforces tenant-ownership for all data access.
     */
    match /tenants/{tenantId} {
      function isTenantOwner(tenantId) {
        return request.auth != null && request.auth.uid == tenantId;
      }

      allow get: if isTenantOwner(tenantId);
      allow list: if false;
      allow create: if isTenantOwner(tenantId) && request.auth.uid == tenantId;
      allow update: if isTenantOwner(tenantId) && resource != null;
      allow delete: if isTenantOwner(tenantId) && resource != null;

      /**
       * @description Secure communities under a tenant, allowing only the tenant to manage them.
       * @path /tenants/{tenantId}/communities/{communityId}
       * @allow (create) isTenantOwner(tenantId) && request.resource.data.createdBy == tenantId
       * @allow (get, list, update, delete) isTenantOwner(tenantId)
       * @deny (create) !isTenantOwner(tenantId) || request.resource.data.createdBy != tenantId
       * @principle Enforces tenant-ownership for community management.
       */
      match /communities/{communityId} {
        function isTenantOwner(tenantId) {
            return request.auth != null && request.auth.uid == tenantId;
        }

        allow get: if isTenantOwner(tenantId);
        allow list: if isTenantOwner(tenantId);
        allow create: if isTenantOwner(tenantId) && request.resource.data.createdBy == tenantId;
        allow update: if isTenantOwner(tenantId) && resource != null && resource.data.createdBy == tenantId;
        allow delete: if isTenantOwner(tenantId) && resource != null && resource.data.createdBy == tenantId;

        /**
         * @description Secure memberships within a community, allowing only community admins and super admins to manage them.
         * @path /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}
         */
        match /memberships/{memberId} {
            allow get: if false;
            allow list: if false;
            allow create: if false;
            allow update: if false;
            allow delete: if false;
        }
      }
    }
  }
}