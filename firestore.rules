rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access.
     * @path /users/{userId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == userId
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create) if request.auth.uid != userId
     * @deny (update, delete) if !isExistingOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if request.auth.uid == userId;
      allow update, delete: if isOwner(userId);
    }

    /**
     * @description Manages tenant access.
     * @path /tenants/{tenantId}
     * @allow (get) if isOwner(tenantId) || isSuperAdmin()
     * @allow (create) if request.auth.uid == tenantId
     * @allow (update, delete) if isExistingOwner(tenantId) || isSuperAdmin()
     * @deny (list) always
     * @deny (create) if request.auth.uid != tenantId
     * @deny (update, delete) if !isExistingOwner(tenantId) && !isSuperAdmin()
     * @principle Enforces tenant ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if isOwner(tenantId) || isSuperAdmin();
      allow list: if false;
      allow create: if request.auth.uid == tenantId;
      allow update, delete: if isOwner(tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages community access for tenants.
     * @path /tenants/{tenantId}/communities/{communityId}
     * @allow (get, list) if true
     * @allow (create) if isOwner(tenantId) && request.resource.data.createdBy == tenantId
     * @allow (update, delete) if (isExistingOwner(request.resource.data.createdBy) && resource.data.createdBy == request.auth.uid) || isSuperAdmin()
     * @deny (create) if !isOwner(tenantId) || request.resource.data.createdBy != tenantId
     * @deny (update, delete) if !(isExistingOwner(resource.data.createdBy) && resource.data.createdBy == request.auth.uid) && !isSuperAdmin()
     * @principle Enforces tenant ownership and community creation by tenants.
     */
    match /tenants/{tenantId}/communities/{communityId} {
      allow get, list: if true;
      allow create: if isTenantOwner(tenantId) && request.resource.data.createdBy == tenantId;
      allow update, delete: if isTenantOwner(tenantId) || isSuperAdmin();
    }

    /**
     * @description Manages membership access within a community.
     * @path /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}
     * @allow (get) if isCommunityAdmin(tenantId, communityId) || request.auth.uid == memberId || isSuperAdmin();
     * @allow (create) if isCommunityAdmin(tenantId, communityId);
     * @allow (update, delete) if isCommunityAdmin(tenantId, communityId) || isSuperAdmin();
     * @deny (list) always
     * @deny (create) if !isCommunityAdmin(tenantId, communityId)
     * @deny (update, delete) if !isCommunityAdmin(tenantId, communityId) && !isSuperAdmin()
     * @principle Enforces community admin role to manage memberships.
     */
    match /tenants/{tenantId}/communities/{communityId}/memberships/{memberId} {
      allow get: if isCommunityAdmin(tenantId, communityId) || request.auth.uid == memberId || isSuperAdmin();
      allow list: if false;
      allow create: if isCommunityAdmin(tenantId, communityId);
      allow update, delete: if isCommunityAdmin(tenantId, communityId) || isSuperAdmin();
    }

    /**
     * @description Manages super admin privileges.
     * @path /super-admins/admins
     * @allow get: if isSignedIn();
     * @allow create, update, delete: if false; // Only Firebase Admin SDK can edit this document
     * @principle Restricts modification of the super admins list to the backend.
     */
    match /super-admins/admins {
      allow get: if isSignedIn();
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return request.auth.uid == resource.data.uid;
  }

  function isSuperAdmin() {
    return get(/databases/$(database)/documents/super-admins/admins).data.uids.hasAny([request.auth.uid]);
  }

  function isCommunityAdmin(tenantId, communityId) {
    return get(/databases/$(database)/documents/tenants/$(tenantId)/communities/$(communityId)/memberships/$(request.auth.uid)).data.role == 'admin' || isSuperAdmin();
  }

    function isTenantOwner(tenantId) {
      return request.auth.uid == tenantId;
    }
}