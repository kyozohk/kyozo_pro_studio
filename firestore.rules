/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model where tenants own their data and users
 * can only access data within tenants they belong to.  Super-admin roles are defined for
 * specific email addresses, granting them full access. All write operations are strictly
 * controlled via authorization checks.  Data validation is relaxed for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /tenants/{tenantId}: Stores tenant information, accessible only to super admins.
 * - /tenants/{tenantId}/communities/{communityId}: Stores communities created by tenants.
 * - /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}: Stores membership information for communities.
 *
 * Key Security Decisions:
 * - Super-admin role:  Users with specific email addresses (tech@kyozo.com, will@kyozo.com, ashok@kyozo.com) are granted full read and write access.
 * - Tenant ownership: Only super admins can create tenants.
 * - Community ownership: Only super admins can create communities.
 * - Membership management:  Only super admins can manage memberships.
 * - No user listing: Listing all users is disallowed for privacy and security reasons.
 *
 * Denormalization for Authorization:
 *  None. The super admin check allows for full access based on email.
 *
 * Structural Segregation:
 * Data is segregated by tenant ID to ensure proper multi-tenancy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's auth UID matches the userId.
     * @deny (get, create, update, delete) if the user's auth UID does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows super admins to manage tenants.
     * @path /tenants/{tenantId}
     * @allow (get, create, update, delete) if the user is a super admin.
     * @deny (get, create, update, delete) if the user is not a super admin.
     * @principle Restricts tenant management to super admins.
     */
    match /tenants/{tenantId} {
      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Allows super admins to manage communities within a tenant.
     * @path /tenants/{tenantId}/communities/{communityId}
     * @allow (get, create, update, delete) if the user is a super admin.
     * @deny (get, create, update, delete) if the user is not a super admin.
     * @principle Restricts community management to super admins.
     */
    match /tenants/{tenantId}/communities/{communityId} {
      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Allows super admins to manage memberships within a community.
     * @path /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}
     * @allow (get, create, update, delete) if the user is a super admin.
     * @deny (get, create, update, delete) if the user is not a super admin.
     * @principle Restricts membership management to super admins.
     */
    match /tenants/{tenantId}/communities/{communityId}/memberships/{memberId} {
      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is a super admin.
     * @return True if the user is a super admin, false otherwise.
     */
    function isSuperAdmin() {
      return isSignedIn() && (request.auth.token.email == "tech@kyozo.com" || request.auth.token.email == "will@kyozo.com" || request.auth.token.email == "ashok@kyozo.com");
    }
  }
}