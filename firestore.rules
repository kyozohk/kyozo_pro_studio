/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on ownership and roles, while relaxing data validation to accelerate prototyping.
 * It enforces that users can only access their own data and tenants can only manage their own communities and memberships.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections for 'users' and 'tenants'.
 * Each tenant has a subcollection of 'communities', and each community has a subcollection of 'memberships'.
 *  users -> {userId} -> UserProfile
 *  tenants -> {tenantId} -> Tenant
 *  tenants -> {tenantId} -> communities -> {communityId} -> Community
 *  tenants -> {tenantId} -> communities -> {communityId} -> memberships -> {memberId} -> Membership
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Tenants have full control over their communities and memberships.
 * - Data validation is minimal to allow for rapid schema iteration.
 * - Listing all users or tenants is disallowed to prevent data scraping.
 *
 * Denormalization for Authorization:
 * The `Community` entity requires a `createdBy` field (tenant ID) to enforce tenant-level ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner of the profile.
     * @deny (get, list) if the user is not signed in.
     * @deny (create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing all users

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to tenant documents.
     * @path /tenants/{tenantId}
     * @allow (get) if the user is signed in.
     * @deny (list) to prevent listing all tenants.
     * @allow (create) if the user is the owner of the tenant.
     * @deny (update, delete) to prevent unauthorized modification or deletion of tenants.
     * @principle Enforces document ownership for writes.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if false;  // Prevent listing all tenants.

      allow create: if isSignedIn() && isOwner(tenantId);
      allow update: if isSignedIn() && isOwner(tenantId);
      allow delete: if isSignedIn() && isOwner(tenantId);
    }

    /**
     * @description Controls access to community documents within a tenant.
     * @path /tenants/{tenantId}/communities/{communityId}
     * @allow (get, list) if the user is signed in.
     * @allow (create) if the user is the owner of the tenant.
     * @deny (update, delete) if the user is not the owner of the tenant or the community does not exist.
     * @principle Enforces tenant-level ownership for community management.
     */
    match /tenants/{tenantId}/communities/{communityId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn() && isTenantOwner(tenantId);
      allow update: if isSignedIn() && isTenantOwner(tenantId);
      allow delete: if isSignedIn() && isTenantOwner(tenantId);
    }

    /**
     * @description Controls access to membership documents within a community.
     * @path /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}
     * @allow (get, list) if the user is signed in and the membership is associated with the correct community.
     * @allow (create) if the user is the owner of the tenant and the membership is for the right community and tenant.
     * @deny (update, delete) if the user is not the owner of the tenant or the membership does not exist.
     * @principle Enforces tenant-level ownership for membership management.
     */
    match /tenants/{tenantId}/communities/{communityId}/memberships/{memberId} {
      allow get: if isSignedIn() && isCommunityMember(tenantId, communityId);
      allow list: if false;
      allow create: if isSignedIn() && isTenantOwner(tenantId);
      allow update: if isSignedIn() && isTenantOwner(tenantId);
      allow delete: if isSignedIn() && isTenantOwner(tenantId);
    }
  }
}

/**
 * @description Checks if the user is signed in.
 * @returns {boolean} True if the user is signed in, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}

/**
 * @description Checks if the user is the owner of the resource.
 * @param {string} userId The user ID to check against.
 * @returns {boolean} True if the user is the owner, false otherwise.
 */
function isOwner(userId) {
  return request.auth.uid == userId;
}

/**
 * @description Checks if the user is the owner of the existing resource.
 *              Ensures that the resource exists before allowing the operation.
 * @param {string} userId The user ID to check against.
 * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
 */
function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
}

/**
 * @description Checks if the user is the tenant owner.
 * @param {string} tenantId The tenant ID.
 * @returns {boolean} True if the user is the tenant owner, false otherwise.
 */
function isTenantOwner(tenantId) {
  return request.auth.uid == tenantId;
}

/**
 * @description Checks if the user is a member of the community.
 * @param {string} tenantId The tenant ID.
 * @param {string} communityId The community ID.
 * @returns {boolean} True if the user is a member of the community, false otherwise.
 */
function isCommunityMember(tenantId, communityId) {
    return exists(/databases/$(database)/documents/tenants/$(tenantId)/communities/$(communityId)/memberships/$(request.auth.uid));
}