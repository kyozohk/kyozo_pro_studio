/**
 * @file Firebase Security Rules for the application.
 *
 * @core_philosophy This ruleset enforces a multi-tenant data model where tenants (organizations) own communities, and users have profiles and memberships within those communities.
 *  - The tenantId in the /tenants/{tenantId} collection corresponds to the UID of the tenant owner.
 *  - User profiles are publicly readable but only writable by the user themselves.
 *  - Communities are owned by tenants, and only tenants can create/modify them.
 *  - Community memberships are managed within the community's subcollection.
 * @data_structure
 *  - /users/{userId}: Stores public user profile information.
 *  - /tenants/{tenantId}: Stores tenant (organization) information, where tenantId is the owner's UID.
 *  - /tenants/{tenantId}/communities/{communityId}: Stores communities created by a specific tenant.
 *  - /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}: Stores membership information for users in a community.
 * @key_security_decisions
 *  - User listing is generally disallowed for privacy.
 *  - Tenant ownership is enforced on community creation and modification.
 *  - Data validation is relaxed during the prototyping phase to allow for rapid schema iteration. However, authorization-critical fields (e.g., tenantId, userId) are validated.
 * @denormalization_for_authorization
 *  - The `createdBy` field in the `/tenants/{tenantId}/communities/{communityId}` collection is used to store the tenantId, enabling direct ownership checks without needing additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, list): Anyone can read user profiles.
     * @allow (create): A user can create their own profile if the userId matches their auth UID.
     * @allow (update, delete): A user can update/delete their own profile if the userId matches their auth UID and the profile exists.
     * @deny A user cannot create a profile for another user (userId != auth.uid).
     * @deny A user cannot update another user's profile.
     * @deny A user cannot delete another user's profile.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tenant (organization) information.
     * @path /tenants/{tenantId}
     * @allow (get, list): Anyone can read tenant information.
     * @allow (create): A tenant can create their own tenant document if the tenantId matches their auth UID.
     * @allow (update, delete): A tenant can update/delete their own tenant document if the tenantId matches their auth UID and the tenant exists.
     * @deny A user cannot create a tenant document for another tenant (tenantId != auth.uid).
     * @deny A user cannot update another tenant's document.
     * @deny A user cannot delete another tenant's document.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /tenants/{tenantId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(tenantId) {
        return request.auth.uid == tenantId;
      }

      function isExistingOwner(tenantId) {
        return isOwner(tenantId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(tenantId) && request.resource.data.tenantId == request.auth.uid;
      allow update: if isExistingOwner(tenantId) && request.resource.data.tenantId == resource.data.tenantId;
      allow delete: if isExistingOwner(tenantId);
    }

    /**
     * @description Controls access to communities created by a tenant.
     * @path /tenants/{tenantId}/communities/{communityId}
     * @allow (get, list): Anyone can read community information.
     * @allow (create): Only the tenant (owner) can create a community.
     * @allow (update, delete): Only the tenant (owner) can update or delete the community.
     * @deny A user cannot create a community for another tenant.
     * @deny A user cannot update another tenant's community.
     * @deny A user cannot delete another tenant's community.
     * @principle Enforces tenant ownership for community management, allows public reads.
     */
    match /tenants/{tenantId}/communities/{communityId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTenantOwner(tenantId) {
        return request.auth.uid == tenantId;
      }

      function isExistingTenantOwner(tenantId) {
        return isTenantOwner(tenantId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isTenantOwner(tenantId) && request.resource.data.createdBy == tenantId;
      allow update: if isExistingTenantOwner(tenantId) && resource.data.createdBy == tenantId;
      allow delete: if isExistingTenantOwner(tenantId) && resource.data.createdBy == tenantId;
    }

    /**
     * @description Controls access to community memberships.
     * @path /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}
     * @allow (get, list): Only the tenant (owner) can list or get all members
     * @allow (create): Only the tenant (owner) can create a membership.
     * @allow (update, delete): Only the tenant (owner) can update or delete a membership.
     * @deny A user cannot create a membership for another tenant's community.
     * @deny A user cannot update another tenant's community's membership.
     * @deny A user cannot delete another tenant's community's membership.
     * @principle Enforces tenant ownership for membership management.
     */
    match /tenants/{tenantId}/communities/{communityId}/memberships/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTenantOwner(tenantId) {
        return request.auth.uid == tenantId;
      }

       function isExistingTenantOwner(tenantId) {
        return isTenantOwner(tenantId) && resource != null;
      }


      allow get, list: if isSignedIn() && isTenantOwner(tenantId);
      allow create: if isSignedIn() && isTenantOwner(tenantId);
      allow update: if isExistingTenantOwner(tenantId);
      allow delete: if isExistingTenantOwner(tenantId);
    }
  }
}