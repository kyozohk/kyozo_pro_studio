/**
 * @fileoverview Firestore Security Rules for kyozo.com.
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model for user profiles and tenants.
 * Communities are owned by tenants, and memberships are managed within communities.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /tenants/{tenantId}: Represents organizations (tenants), with tenantId matching the owner's UID.
 * - /tenants/{tenantId}/communities/{communityId}: Communities created by a tenant.
 * - /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}: Memberships within a community.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Only the tenant owner can manage their tenant profile.
 * - Community creation is restricted to tenant owners.
 * - Membership management is restricted to community administrators.
 * - Listing all documents is not permitted.
 *
 * Denormalization for Authorization:
 * - The `Community` entity has a `createdBy` field that stores the `tenantId` of the creating tenant. This is CRITICAL for authorization, as it avoids needing to query up the collection hierarchy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can access their own profile.
     * @allow (create) User with matching UID can create their own profile.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Allow the user to update their own profile. Enforce immutability of userId.
      allow update: if isOwner(userId);

      // Allow the user to delete their own profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to tenant data.
     * @path /tenants/{tenantId}
     * @allow (get, update, delete) Tenant owner with matching UID can access their own tenant.
     * @allow (create) Tenant owner with matching UID can create their own tenant.
     * @deny (get, update, delete) User cannot access another tenant's profile.
     * @principle Enforces document ownership for writes.
     */
    match /tenants/{tenantId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(tenantId) {
        return request.auth != null && request.auth.uid == tenantId;
      }
      
      // Helper function to check if the user is signed in and owns the document and document exists.
      function isExistingOwner(tenantId) {
        return isOwner(tenantId) && exists(/databases/$(database)/documents/tenants/$(tenantId));
      }

      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(tenantId);
      allow list: if false;
      
      // Allow the tenant owner to create their own tenant
      allow create: if isSignedIn() && request.auth.uid == tenantId;

      // Allow the tenant owner to update their own tenant. Enforce immutability of tenantId.
      allow update: if isExistingOwner(tenantId);
      
      // Allow the tenant owner to delete their own tenant.
      allow delete: if isExistingOwner(tenantId);

      
    }

    /**
     * @description Controls access to community data within a tenant.
     * @path /tenants/{tenantId}/communities/{communityId}
     * @allow (get, list) All users can read community data.
     * @allow (create) Only the tenant owner can create a community.
     * @allow (update, delete) Only the tenant owner (creator) can update/delete a community.
     * @deny  (create) if createdBy does not match the tenantId in the path
     * @principle Public read, owner-only writes, and enforces tenant ownership for creation.
     */
    match /tenants/{tenantId}/communities/{communityId} {
      // Helper function to check if the user is signed in and owns the tenant.
      function isTenantOwner(tenantId) {
        return request.auth != null && request.auth.uid == tenantId;
      }
      
      // Helper function to check if the user is signed in and owns the tenant and document exists.
      function isExistingTenantOwner(tenantId) {
        return isTenantOwner(tenantId) && exists(/databases/$(database)/documents/tenants/$(tenantId));
      }

      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      //Allow all users to read the community
      allow get, list: if true;

      // Allow the tenant owner to create a community
      allow create: if isTenantOwner(tenantId);

      // Only the tenant that created the community can update it, and creatorId must be immutable
      allow update: if isExistingTenantOwner(tenantId);
      // Only the tenant that created the community can delete it
      allow delete: if isExistingTenantOwner(tenantId);
    }

    /**
     * @description Controls access to membership data within a community.
     * @path /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}
     * @allow (get, list) All users can read membership data.
     * @allow (create) Only community administrators can create memberships.
     * @allow (update, delete) Only community administrators can update/delete memberships.
     * @principle  Public read, owner-only writes, and relies on community admin role for write access.
     */
    match /tenants/{tenantId}/communities/{communityId}/memberships/{memberId} {
      // Helper function to check if the user is signed in and owns the tenant.
      function isTenantOwner(tenantId) {
        return request.auth != null && request.auth.uid == tenantId;
      }
      
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }
       // TODO: Implement community admin role check.
      function isAdmin() {
        return true;
      }

      //Allow all users to read the community membership
      allow get, list: if true;

      // Only community admins can create, update, and delete memberships
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}