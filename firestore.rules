/**
 * @fileOverview Firestore Security Rules for kyozo-7f801.firebaseapp.com.
 *
 * Core Philosophy:
 * This ruleset implements a multi-tenant security model with user-based access control.
 * Each user can create and manage tenants, and each tenant can create and manage communities.
 * Access to communities and memberships is restricted based on tenant ownership and user roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only to the user themselves.
 * - /tenants/{tenantId}: Stores tenant (organization) information. Accessible only to the tenant owner (userId == tenantId).
 * - /tenants/{tenantId}/communities/{communityId}: Stores community information. Accessible only to the tenant owner. The `createdBy` field must match the `tenantId`.
 * - /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}: Stores membership information. Accessible only to the tenant owner and community administrators.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Strict ownership is enforced for tenants and communities.
 * - Data consistency between document IDs and internal fields is enforced on create and update.
 * - The rules are designed to be highly secure and prevent unauthorized access to any data.
 *
 * Denormalization for Authorization:
 * The `Community` entity includes a `createdBy` field, which MUST match the `tenantId` of the parent `/tenants/{tenantId}` document.
 * This denormalization enables efficient security rules without requiring costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     *              This is used for update and delete operations to prevent acting on non-existent documents.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get) User 'user123' can read their profile if authenticated as 'user123'.
     * @allow (update) User 'user123' can update their profile if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create a profile for 'user123'.
     * @deny (get) User 'user456' cannot read the profile of 'user123'.
     * @deny (update) User 'user456' cannot update the profile of 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if false; // Deletion is not permitted.
    }

    /**
     * @description Enforces tenant-level access control. Only the tenant owner can manage tenant data.
     * @path /tenants/{tenantId}
     * @allow (create) User 'tenant123' can create a tenant if authenticated as 'tenant123'.
     * @allow (get) User 'tenant123' can read their tenant data if authenticated as 'tenant123'.
     * @allow (update) User 'tenant123' can update their tenant data if authenticated as 'tenant123'.
     * @deny (create) User 'user456' cannot create a tenant for 'tenant123'.
     * @deny (get) User 'user456' cannot read the tenant data of 'tenant123'.
     * @deny (update) User 'user456' cannot update the tenant data of 'tenant123'.
     * @principle Enforces document ownership for tenant management.
     */
    match /tenants/{tenantId} {
      allow get: if isOwner(tenantId);
      allow list: if false; // Tenant listing is not permitted.
      allow create: if isOwner(tenantId) && request.resource.data.tenantId == tenantId;
      allow update: if isExistingOwner(tenantId) && request.resource.data.tenantId == resource.data.tenantId;
      allow delete: if false; // Deletion is not permitted.
    }

    /**
     * @description Enforces community-level access control. Only the tenant owner can manage communities.
     *              Requires that the `createdBy` field in the `Community` document matches the `tenantId`.
     * @path /tenants/{tenantId}/communities/{communityId}
     * @allow (create) User 'tenant123' can create a community under their tenant if authenticated as 'tenant123' and `createdBy` matches.
     * @allow (get) User 'tenant123' can read a community under their tenant if authenticated as 'tenant123'.
     * @allow (update) User 'tenant123' can update a community under their tenant if authenticated as 'tenant123' and `createdBy` matches.
     * @deny (create) User 'user456' cannot create a community under tenant 'tenant123'.
     * @deny (get) User 'user456' cannot read a community under tenant 'tenant123'.
     * @deny (update) User 'user456' cannot update a community under tenant 'tenant123'.
     * @principle Enforces tenant ownership for community management and validates the `createdBy` field.
     */
    match /tenants/{tenantId}/communities/{communityId} {
      allow get: if isOwner(tenantId);
      allow list: if isOwner(tenantId);
      allow create: if isOwner(tenantId) && request.resource.data.createdBy == tenantId;
      allow update: if isExistingOwner(tenantId) && request.resource.data.createdBy == resource.data.createdBy;
      allow delete: if false; // Deletion is not permitted.
    }

    /**
     * @description Enforces membership-level access control. Only the tenant owner can manage memberships.
     * @path /tenants/{tenantId}/communities/{communityId}/memberships/{memberId}
     * @allow (create) User 'tenant123' can create a membership if authenticated as 'tenant123'.
     * @allow (get) User 'tenant123' can read a membership if authenticated as 'tenant123'.
     * @allow (update) User 'tenant123' can update a membership if authenticated as 'tenant123'.
     * @deny (create) User 'user456' cannot create a membership under tenant 'tenant123'.
     * @deny (get) User 'user456' cannot read a membership under tenant 'tenant123'.
     * @deny (update) User 'user456' cannot update a membership under tenant 'tenant123'.
     * @principle Enforces tenant ownership for membership management.
     */
    match /tenants/{tenantId}/communities/{communityId}/memberships/{memberId} {
      allow get: if isOwner(tenantId);
      allow list: if isOwner(tenantId);
      allow create: if isOwner(tenantId);
      allow update: if isExistingOwner(tenantId);
      allow delete: if false; // Deletion is not permitted.
    }
    
    /**
     * @description Test route for community creation.
     * @path /test/{document}
     * @allow (create) Only authenticated users can create
     * @allow (get) Only authenticated users can get
     * @allow (update) Only authenticated users can update
     * @allow (delete) Only authenticated users can delete
     */
    match /test/{document} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
      allow list: if isSignedIn();
    }
  }
}